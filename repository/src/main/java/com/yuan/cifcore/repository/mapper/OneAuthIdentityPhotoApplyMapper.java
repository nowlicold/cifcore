/*
 * Bench Inc.
 * Copyright (c) 2004 All Rights Reserved.
 */
package com.yuan.cifcore.repository.mapper;



// auto generated imports
//dao imports
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import com.yuan.cifcore.repository.entity.OneAuthIdentityPhotoApplyDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.apache.ibatis.annotations.Param;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
//do imports

/**
 * A dao interface provides methods to access database table <tt>one_auth_identity_photo_apply</tt>.
 *
 * This file is generated by <tt>bench-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bench</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/one_auth_identity_photo_apply.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bench-gen-dal</tt> 
 * to generate this file.
 *
 * @author cold
 */
public interface OneAuthIdentityPhotoApplyMapper  extends BaseMapper<OneAuthIdentityPhotoApplyDO>{
	/**
	 *  Update DB table <tt>one_auth_identity_photo_apply</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update one_auth_identity_photo_apply set auditor=?, status=?, gmt_audit=sysdate, audit_memo=? where (id = ?)</tt>
	 *
	 *	@param auditor 
	 *	@param status 
	 *	@param auditMemo 
	 *	@param id 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateAuditById(@Param("auditor")String auditor , @Param("status")String status , @Param("auditMemo")String auditMemo , @Param("id")String id) throws DataAccessException;

	/**
	 *  Query DB table <tt>one_auth_identity_photo_apply</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, one_auth_id, creater, auditor, status, gmt_create, gmt_modified, gmt_audit, front_photo_resources_id, back_photo_resources_id, audit_memo from one_auth_identity_photo_apply where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return OneAuthIdentityPhotoApplyDO
	 *	@throws DataAccessException
	 */	 

		public OneAuthIdentityPhotoApplyDO selectById(@Param("id")String id) throws DataAccessException;

	/**
	 *  Query DB table <tt>one_auth_identity_photo_apply</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, one_auth_id, creater, auditor, status, gmt_create, gmt_modified, gmt_audit, front_photo_resources_id, back_photo_resources_id, audit_memo from one_auth_identity_photo_apply where (id = ?) for update</tt>
	 *
	 *	@param id 
	 *	@return OneAuthIdentityPhotoApplyDO
	 *	@throws DataAccessException
	 */	 

		public OneAuthIdentityPhotoApplyDO selectByIdForUpdate(@Param("id")String id) throws DataAccessException;

	/**
	 *  Query DB table <tt>one_auth_identity_photo_apply</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, one_auth_id, creater, auditor, status, gmt_create, gmt_modified, gmt_audit, front_photo_resources_id, back_photo_resources_id, audit_memo from one_auth_identity_photo_apply where (one_auth_id = ?)</tt>
	 *
	 *	@param oneAuthId 
	 *	@return List<OneAuthIdentityPhotoApplyDO>
	 *	@throws DataAccessException
	 */	 

		public List<OneAuthIdentityPhotoApplyDO> selectByOneAuthId(@Param("oneAuthId")String oneAuthId) throws DataAccessException;

	/**
	 *  Query DB table <tt>one_auth_identity_photo_apply</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, one_auth_id, creater, auditor, status, gmt_create, gmt_modified, gmt_audit, front_photo_resources_id, back_photo_resources_id, audit_memo from one_auth_identity_photo_apply where (1 = 0)</tt>
	 *
	 *	@param oneAuthId 
	 *	@param status 
	 *	@param beginCreateDate 
	 *	@param endCreateDate 
	 *	@param beginAuditDate 
	 *	@param endAuditDate 
	 *	@param page 
	 *	@return List<OneAuthIdentityPhotoApplyDO>
	 *	@throws DataAccessException
	 */	 

		public List<OneAuthIdentityPhotoApplyDO> search(@Param("oneAuthId")String oneAuthId , @Param("status")String status , @Param("beginCreateDate")Date beginCreateDate , @Param("endCreateDate")Date endCreateDate , @Param("beginAuditDate")Date beginAuditDate , @Param("endAuditDate")Date endAuditDate , @Param("page")Page<OneAuthIdentityPhotoApplyDO> page) throws DataAccessException;

}