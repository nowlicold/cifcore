/*
 * Bench Inc.
 * Copyright (c) 2004 All Rights Reserved.
 */
package com.yuan.cifcore.repository.mapper;



// auto generated imports
//dao imports
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import com.yuan.cifcore.repository.entity.OneAuthDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.apache.ibatis.annotations.Param;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
//do imports

/**
 * A dao interface provides methods to access database table <tt>cif_one_auth</tt>.
 *
 * This file is generated by <tt>bench-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bench</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/cif_one_auth.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bench-gen-dal</tt> 
 * to generate this file.
 *
 * @author cold
 */
public interface OneAuthMapper  extends BaseMapper<OneAuthDO>{
	/**
	 *  Query DB table <tt>cif_one_auth</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select one_auth_id, auth_name, auth_name_type, gmt_create, gmt_modified, cell, cell_validate, domain, sub_domain, default_user_id, login_password, can_login, account_password, real_name, email, qq, cert_type, cert_no, email_validate, qq_validate, gmt_change_identity, sex, birthday from cif_one_auth where (auth_name = ?)</tt>
	 *
	 *	@param authName 
	 *	@return OneAuthDO
	 *	@throws DataAccessException
	 */	 

		public OneAuthDO selectByAuthName(@Param("authName")String authName) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_one_auth</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select one_auth_id, auth_name, auth_name_type, gmt_create, gmt_modified, cell, cell_validate, domain, sub_domain, default_user_id, login_password, can_login, account_password, real_name, email, qq, cert_type, cert_no, email_validate, qq_validate, gmt_change_identity, sex, birthday from cif_one_auth where (one_auth_id = ?)</tt>
	 *
	 *	@param oneAuthId 
	 *	@return OneAuthDO
	 *	@throws DataAccessException
	 */	 

		public OneAuthDO selectByOneAuthId(@Param("oneAuthId")String oneAuthId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_one_auth</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select one_auth_id, auth_name, auth_name_type, gmt_create, gmt_modified, cell, cell_validate, domain, sub_domain, default_user_id, login_password, can_login, account_password, real_name, email, qq, cert_type, cert_no, email_validate, qq_validate, gmt_change_identity, sex, birthday from cif_one_auth where (1 = 0)</tt>
	 *
	 *	@param oneAuthIds 
	 *	@return List<OneAuthDO>
	 *	@throws DataAccessException
	 */	 

		public List<OneAuthDO> selectByOneAuthIds(@Param("oneAuthIds")List<?> oneAuthIds) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_one_auth</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select one_auth_id, auth_name, auth_name_type, gmt_create, gmt_modified, cell, cell_validate, domain, sub_domain, default_user_id, login_password, can_login, account_password, real_name, email, qq, cert_type, cert_no, email_validate, qq_validate, gmt_change_identity, sex, birthday from cif_one_auth where (1 = 0)</tt>
	 *
	 *	@param certType 
	 *	@param certNo 
	 *	@param realName 
	 *	@return List<OneAuthDO>
	 *	@throws DataAccessException
	 */	 

		public List<OneAuthDO> selectByCertTypeAndCertNoAndRealName(@Param("certType")String certType , @Param("certNo")String certNo , @Param("realName")String realName) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_one_auth</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_one_auth set gmt_modified=@db@.sysdate, default_user_id=? where (one_auth_id = ?)</tt>
	 *
	 *	@param defaultUserId 
	 *	@param oneAuthId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateDefaultUserId(@Param("defaultUserId")String defaultUserId , @Param("oneAuthId")String oneAuthId) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_one_auth</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_one_auth set gmt_modified=@db@.sysdate, cell=?, cell_validate=? where (one_auth_id = ?)</tt>
	 *
	 *	@param cell 
	 *	@param cellValidate 
	 *	@param oneAuthId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateValidatedCell(@Param("cell")String cell , @Param("cellValidate")boolean cellValidate , @Param("oneAuthId")String oneAuthId) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_one_auth</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_one_auth set gmt_modified=@db@.sysdate, auth_name=? where (one_auth_id = ?)</tt>
	 *
	 *	@param authName 
	 *	@param oneAuthId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateAuthName(@Param("authName")String authName , @Param("oneAuthId")String oneAuthId) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_one_auth</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_one_auth set login_password=?, gmt_modified=@db@.sysdate where (one_auth_id = ?)</tt>
	 *
	 *	@param loginPassword 
	 *	@param oneAuthId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateLoginPassword(@Param("loginPassword")String loginPassword , @Param("oneAuthId")String oneAuthId) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_one_auth</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_one_auth set can_login=?, gmt_modified=@db@.sysdate where (one_auth_id = ?)</tt>
	 *
	 *	@param canLogin 
	 *	@param oneAuthId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateCanLogin(@Param("canLogin")boolean canLogin , @Param("oneAuthId")String oneAuthId) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_one_auth</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_one_auth set gmt_modified=@db@.sysdate where (1 = 0)</tt>
	 *
	 *	@param realName 
	 *	@param certNo 
	 *	@param certType 
	 *	@param oneAuthId 
	 *	@param gmtChangeIdentity 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateIdentify(@Param("realName")String realName , @Param("certNo")String certNo , @Param("certType")String certType , @Param("oneAuthId")String oneAuthId , @Param("gmtChangeIdentity")Date gmtChangeIdentity) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_one_auth</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select one_auth_id, auth_name, auth_name_type, gmt_create, gmt_modified, cell, cell_validate, domain, sub_domain, default_user_id, login_password, can_login, account_password, real_name, email, qq, cert_type, cert_no, email_validate, qq_validate, gmt_change_identity, sex, birthday from cif_one_auth where (1 = 0)</tt>
	 *
	 *	@param oneAuthId 
	 *	@param authName 
	 *	@param authNameType 
	 *	@param email 
	 *	@param qq 
	 *	@param cell 
	 *	@param certNo 
	 *	@param beginCreateDate 
	 *	@param endCreateDate 
	 *	@param orderBy 
	 *	@param domain 
	 *	@param subDomain 
	 *	@param page 
	 *	@return List<OneAuthDO>
	 *	@throws DataAccessException
	 */	 

		public List<OneAuthDO> search(@Param("oneAuthId")String oneAuthId , @Param("authName")String authName , @Param("authNameType")String authNameType , @Param("email")String email , @Param("qq")String qq , @Param("cell")String cell , @Param("certNo")String certNo , @Param("beginCreateDate")Date beginCreateDate , @Param("endCreateDate")Date endCreateDate , @Param("orderBy")String orderBy , @Param("domain")String domain , @Param("subDomain")String subDomain , @Param("page")Page<OneAuthDO> page) throws DataAccessException;

}