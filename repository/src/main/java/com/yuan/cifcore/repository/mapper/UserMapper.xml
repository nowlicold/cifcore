<?xml version="1.0" encoding="GB2312" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>bench-gen-dal</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>bench</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>bench-gen-dal</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author nowli                                                          -->
<!-- ============================================================================= -->

<mapper namespace="com.yuan.cifcore.repository.mapper.UserMapper">
	
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table cif_user -->
    <resultMap id="RM-USER" type="com.yuan.cifcore.repository.entity.UserDO">
        <result property="userId" column="user_id"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="loginName" column="login_name"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="loginPassword" column="login_password"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="realName" column="real_name"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="status" column="status"  javaType="java.lang.String"  jdbcType="CHAR"/>
        <result property="email" column="email"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="qq" column="qq"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="canLogin" column="can_login"  javaType="boolean"  jdbcType="CHAR"/>
        <result property="certType" column="cert_type"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="certNo" column="cert_no"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="gmtCreate" column="gmt_create"  javaType="java.util.Date"  jdbcType="TIMESTAMP"/>
        <result property="gmtModified" column="gmt_modified"  javaType="java.util.Date"  jdbcType="TIMESTAMP"/>
        <result property="emailValidate" column="email_validate"  javaType="boolean"  jdbcType="CHAR"/>
        <result property="qqValidate" column="qq_validate"  javaType="boolean"  jdbcType="CHAR"/>
        <result property="cell" column="cell"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="cellValidate" column="cell_validate"  javaType="boolean"  jdbcType="CHAR"/>
        <result property="accountPassword" column="account_password"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="nickName" column="nick_name"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="userTypeName" column="user_type_name"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="domain" column="domain"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="subDomain" column="sub_domain"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="gmtChangeIdentity" column="gmt_change_identity"  javaType="java.util.Date"  jdbcType="TIMESTAMP"/>
        <result property="sex" column="sex"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="birthday" column="birthday"  javaType="java.util.Date"  jdbcType="TIMESTAMP"/>
        <result property="oneAuthId" column="one_auth_id"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="USER_ID_AND_IDENTITY_DATE_DO" type="com.yuan.cifcore.repository.entity.ext.UserIdAndIdentityDateDO">
        <result property="userId" column="user_id"  javaType="java.lang.String"  jdbcType="VARCHAR"/>
        <result property="gmtChangeIdentity" column="gmt_change_identity"  javaType="java.util.Date"  jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
         user_id  ,
         login_name  ,
         login_password  ,
         real_name  ,
         status  ,
         email  ,
         qq  ,
         can_login  ,
         cert_type  ,
         cert_no  ,
         gmt_create  ,
         gmt_modified  ,
         email_validate  ,
         qq_validate  ,
         cell  ,
         cell_validate  ,
         account_password  ,
         nick_name  ,
         user_type_name  ,
         domain  ,
         sub_domain  ,
         gmt_change_identity  ,
         sex  ,
         birthday  ,
         one_auth_id 
    </sql>




    <!-- ============================================= -->
    <!-- mapped statements for IbatisUserDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisUserDAO.selectUserIdsByCertNo -->
    <select id="selectUserIdsByCertNo" resultType="java.lang.String">
    <![CDATA[
        select user_id from cif_user where (cert_no = #{certNo}) order by gmt_create ASC limit 0,#recordLimitAmount#
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectOneAuthIdByUserId -->
    <select id="selectOneAuthIdByUserId" resultType="java.lang.String">
    <![CDATA[
        select one_auth_id from cif_user where (user_id = #{userId})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectCertNoByUserId -->
    <select id="selectCertNoByUserId" resultType="java.lang.String">
    <![CDATA[
        select cert_no from cif_user where (user_id = #{userId})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserCellsWithSameCertNoAndTypeByCell -->
    <select id="selectUserCellsWithSameCertNoAndTypeByCell" resultType="java.lang.String">
        select distinct (a.cell)          		from cif_user a        		where exists (select 1                      from CIF_USER b                     where b.cell =#{cell}                       and b.cert_type=a.cert_type                       and b.cert_no = a.cert_no)         	 	and a.cell is not null
    </select>
    <!-- mapped statement for IbatisUserDAO.selectValidatedCellByUserId -->
    <select id="selectValidatedCellByUserId" resultType="java.lang.String">
    <![CDATA[
        select cell from cif_user where ((user_id = #{userId}) AND (cell_validate = 1))
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectGmtCreateByUserId -->
    <select id="selectGmtCreateByUserId" resultType="java.util.Date">
    <![CDATA[
        select gmt_create from cif_user where (user_id = #{userId})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectByThirdUserIdAndDomainAndThirdChannel -->
    <select id="selectByThirdUserIdAndDomainAndThirdChannel" resultMap="RM-USER">
        select			user_id,login_name,login_password,real_name,status,email,qq,can_login,cert_type,cert_no,gmt_create,			gmt_modified,email_validate,qq_validate,cell,cell_validate,account_password,nick_name,user_type_name,domain,sub_domain,			gmt_change_identity,sex,birthday,one_auth_id			from			cif_user t			where exists (				select m.user_id from cif_third_user_mapping m where  m.third_user_id = #{thirdUserId}  and m.third_channel = #{thirdChannel}				 and domain=#{domain} and t.user_id = m.user_id			)
    </select>
    <!-- mapped statement for IbatisUserDAO.selectBySubDomainAndOneAuthId -->
    <select id="selectBySubDomainAndOneAuthId" resultMap="RM-USER">
        select				user_id,login_name,login_password,real_name,status,email,qq,can_login,cert_type,cert_no,gmt_create,				gmt_modified,email_validate,qq_validate,cell,cell_validate,account_password,nick_name,user_type_name,domain,sub_domain,				gmt_change_identity,sex,birthday,one_auth_id				from				cif_user				where sub_domain=#{subDomain} and one_auth_id=#{oneAuthId}
    </select>
    <!-- mapped statement for IbatisUserDAO.selectByUserId -->
    <select id="selectByUserId" resultMap="RM-USER">
    <![CDATA[
        select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (user_id = #{userId})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectByNickName -->
    <select id="selectByNickName" resultMap="RM-USER">
        select			user_id,login_name,login_password,real_name,status,email,qq,can_login,cert_type,cert_no,gmt_create,			gmt_modified,email_validate,qq_validate,cell,cell_validate,account_password,nick_name,user_type_name,domain,sub_domain,			gmt_change_identity,sex,birthday,one_auth_id			from			cif_user			where			nick_name like '%'||#{nickName}||'%'
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserIdsByNickNameAndGmtCreate -->
    <select id="selectUserIdsByNickNameAndGmtCreate" resultType="java.lang.String">
        select			user_id			from			cif_user			<where>			 	   <if test="beginCreateDate != null">	     			  <![CDATA[							and gmt_create >= #{beginCreateDate}	                  ]]>                   </if>                   <if test="endCreateDate != null">	     			  <![CDATA[							and gmt_create <= #{endCreateDate}	                  ]]>                   </if>                   <if test="nickName != null and nickName != ''">	     			  <![CDATA[							and nick_name like CONCAT( '%', #{nickName}, '%' )	                  ]]>                   </if>			</where>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectCellValidatedByUserId -->
    <select id="selectCellValidatedByUserId" resultType="boolean">
    <![CDATA[
        select cell_validate from cif_user where (user_id = #{userId})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserByNickNameAndSubDomain -->
    <select id="selectUserByNickNameAndSubDomain" resultMap="RM-USER">
    <![CDATA[
        select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where ((nick_name = #{nickName}) AND (sub_domain = #{subDomain}))
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectByValidatedCell -->
    <select id="selectByValidatedCell" resultMap="RM-USER">
    <![CDATA[
        select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where ((cell = #{cell}) AND (cell_validate = '1')) limit 0,#recordLimitAmount#
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectCountByCell -->
    <select id="selectCountByCell" resultType="long">
    <![CDATA[
        select COUNT(*) from cif_user where (cell = #{cell})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectCountBySubDomainAndOneAuthId -->
    <select id="selectCountBySubDomainAndOneAuthId" resultType="long">
    <![CDATA[
        select COUNT(*) from cif_user where ((sub_domain = #{subDomain}) AND (one_auth_id = #{oneAuthId}))
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserIdsByValidatedCell -->
    <select id="selectUserIdsByValidatedCell" resultType="java.lang.String">
    <![CDATA[
        select user_id from cif_user where ((cell = #{cell}) AND (cell_validate = '1')) order by gmt_create ASC limit 0,#recordLimitAmount#
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectByUserIds -->
    <select id="selectByUserIds" resultMap="RM-USER">
        select user_id,login_name,login_password,real_name,status,email,qq,can_login,cert_type,cert_no,gmt_create,			gmt_modified,email_validate,qq_validate,cell,cell_validate,account_password,nick_name,user_type_name,domain,sub_domain,			gmt_change_identity,sex,birthday,one_auth_id			from cif_user where			<foreach open="user_id in (" close=")" separator="," collection="userIds" item="item">				<![CDATA[					#{item}				]]>			</foreach>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserByLoginName -->
    <select id="selectUserByLoginName" resultMap="RM-USER">
    <![CDATA[
        select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (login_name = #{loginName})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectEveryDayAddUserCountGroupByDate -->
    <select id="selectEveryDayAddUserCountGroupByDate" resultType="java.util.HashMap">
        <![CDATA[                      select to_char(gmt_create,'yyyy-mm-dd') as create_date,count(user_id) as user_count from cif_user where                      gmt_create >=  #{beginCreateDate}                      and gmt_create <=  #{endCreateDate}                      group by to_char(gmt_create,'yyyy-mm-dd') order by to_char(gmt_create,'yyyy-mm-dd') asc    			    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectAllUserCountByEndRegisterDate -->
    <select id="selectAllUserCountByEndRegisterDate" resultType="long">
    <![CDATA[
        select COUNT(*) from cif_user where (gmt_create <= #{gmtCreate})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.search -->
    <!-- queryPage分页方法dba注意sqlreview -->
    <select id="search" resultMap="RM-USER">
        <![CDATA[				select user_id,login_name,login_password,real_name,status,email,qq,can_login,cert_type,cert_no,gmt_create,			gmt_modified,email_validate,qq_validate,cell,cell_validate,account_password,nick_name,user_type_name,domain,sub_domain,			gmt_change_identity,sex,birthday,one_auth_id				from cif_user  u				]]>				 <where>						  	<if test="userId != null and userId != ''">	     			          <![CDATA[							    	and user_id=#{userId}	                    	  ]]>                            </if>                            <if test="userTypeName != null and userTypeName != ''">	     			          <![CDATA[							    	and user_type_name=#{userTypeName}	                    	  ]]>                            </if>                 			<if test="loginName != null and loginName != ''">	     			          <![CDATA[							    	and login_name like #{loginName}	                    	  ]]>                            </if>                            <if test="realName != null and realName != ''">	     			          <![CDATA[							    	and real_name=#{realName}	                    	  ]]>                            </if>                             <if test="email != null and email != ''">	     			          <![CDATA[							    	and email=#{email}	                    	  ]]>                            </if>                            <if test="qq != null and qq != ''">	     			          <![CDATA[							    	and qq=#{qq}	                    	  ]]>                            </if>                              <if test="cell != null and cell != ''">	     			          <![CDATA[							    	and cell=#{cell}	                    	  ]]>                            </if>                              <if test="certNo != null and certNo != ''">	     			          <![CDATA[							    	and cert_no=#{certNo}	                    	  ]]>                            </if>                             <if test="beginCreateDate != null">	     			          <![CDATA[							    	and gmt_create >= #{beginCreateDate}	                    	  ]]>                            </if>                             <if test="endCreateDate != null">	     			          <![CDATA[							    	and gmt_create <= #{endCreateDate}	                    	  ]]>                            </if>	                    	   <if test="userGrade != null and userGrade != ''">	     			          <![CDATA[							    	and exists(select 1 from cif_user_level l where l.user_id=u.user_id and l.level_name='GRADE' and level_value=#{userGrade})	                    	  ]]>                            </if>                            <if test="thirdParentUserId != null and thirdParentUserId != ''">                            		and exists (select user_id from cif_third_user_mapping t where t.third_parent_user_id=#{thirdParentUserId}  and t.user_id = u.user_id)                            </if>                            <if test="domainList != null and !domainList.isEmpty()">							  and				               <foreach open="domain in (" close=")" separator="," collection="domainList" item="item">									#{item}								</foreach>							</if>							<if test="subDomainList != null and !subDomainList.isEmpty()">							  and				               <foreach open="sub_domain in (" close=")" separator="," collection="subDomainList" item="item">									#{item}								</foreach>							</if>							<if test="nickNameLike != null and nickNameLike != ''">	     			          <![CDATA[							    	and nick_name like CONCAT( '%', #{nickNameLike}, '%' )	                    	  ]]>                            </if>                            <if test="oneAuthId != null and oneAuthId != ''">	     			          <![CDATA[							    	and one_auth_id=#{oneAuthId}	                    	  ]]>                            </if>              	</where>              				        <if test="orderBy != null and orderBy != ''">		     			          <![CDATA[								    	order by ${orderBy}		                    	  ]]>	                         </if>
    </select>
    <!-- mapped statement for IbatisUserDAO.updateUserInfoByUser -->
    <update id="updateUserInfoByUser">
        <![CDATA[                        update cif_user set qq=#qq#,email=#email#, gmt_modified=sysdate()    			    ]]>					    <trim prefix="set" suffixOverrides=","/>						  	<if test="realName != null and realName != ''">	     			          <![CDATA[							    	, real_name=#{realName}	                    	  ]]>                            </if>                            <if test="accountPassword != null and accountPassword != ''">	     			          <![CDATA[							    	, account_password=#{accountPassword}	                    	  ]]>                            </if>                 			<if test="certNo != null and certNo != ''">	     			          <![CDATA[							    	, cert_no=#{certNo}	                    	  ]]>                            </if>                            <if test="certType != null and certType != ''">	     			          <![CDATA[							    	, cert_type=#{certType}	                    	  ]]>                            </if>                            <if test="nickName != null and nickName != ''">	     			          <![CDATA[							    	, nick_name=#{nickName}	                    	  ]]>                            </if>                            <if test="sex != null and sex != ''">	     			          <![CDATA[							    	, sex=#{sex}	                    	  ]]>                            </if>                            <if test="birthday != null and birthday != ''">	     			          <![CDATA[							    	, birthday=#{birthday}	                    	  ]]>                            </if>              			               		where user_id=#userId#
    </update>

    <!-- mapped statement for IbatisUserDAO.updateLoginPassword -->
    <update id="updateLoginPassword">
    <![CDATA[
        update cif_user set login_password=#{loginPassword}, gmt_modified=sysdate() where (user_id = #{userId})
    ]]>
    </update>

    <!-- mapped statement for IbatisUserDAO.updateAccountPassword -->
    <update id="updateAccountPassword">
    <![CDATA[
        update cif_user set account_password=#{accountPassword}, gmt_modified=sysdate() where (user_id = #{userId})
    ]]>
    </update>

    <!-- mapped statement for IbatisUserDAO.updateActiveUserByEmail -->
    <update id="updateActiveUserByEmail">
    <![CDATA[
        update cif_user set status=#{status}, email_validate=#{emailValidate}, gmt_modified=sysdate() where (user_id = #{userId})
    ]]>
    </update>

    <!-- mapped statement for IbatisUserDAO.updateEmailValidate -->
    <update id="updateEmailValidate">
    <![CDATA[
        update cif_user set email_validate=#{emailValidate}, gmt_modified=sysdate() where (user_id = #{userId})
    ]]>
    </update>

    <!-- mapped statement for IbatisUserDAO.updateEmail -->
    <update id="updateEmail">
    <![CDATA[
        update cif_user set email=#{email}, email_validate=#{emailValidate}, gmt_modified=sysdate() where (user_id = #{userId})
    ]]>
    </update>

    <!-- mapped statement for IbatisUserDAO.updateCellValidate -->
    <update id="updateCellValidate">
    <![CDATA[
        update cif_user set cell_validate=#{cellValidate}, cell=#{cell}, gmt_modified=sysdate() where (user_id = #{userId})
    ]]>
    </update>

    <!-- mapped statement for IbatisUserDAO.updateUserCanLogin -->
    <update id="updateUserCanLogin">
    <![CDATA[
        update cif_user set can_login=#{canLogin}, gmt_modified=sysdate() where (user_id = #{userId})
    ]]>
    </update>

    <!-- mapped statement for IbatisUserDAO.updateUsersCanLogin -->
    <update id="updateUsersCanLogin">
        update cif_user set			can_login=#{canLogin},gmt_modified=sysdate()			where			user_id in			<foreach open=" (" close=")" separator="," collection="userIds" item="item">				 #{item}			</foreach>
    </update>

    <!-- mapped statement for IbatisUserDAO.updateRealNameCertNoAndCertType -->
    <update id="updateRealNameCertNoAndCertType">
        update cif_user set gmt_modified=sysdate()			<if test="gmtChangeIdentity != null">				,gmt_change_identity=#{gmtChangeIdentity}			</if>			<if test="realName != null and realName != ''">				,real_name=#{realName}			</if>			<if test="certNo != null and certNo != ''">				,cert_no=#{certNo}			</if>			<if test="certType != null and certType != ''">				,cert_type=#{certType}			</if>			where user_id=#{userId}
    </update>

    <!-- mapped statement for IbatisUserDAO.selectCountByUserId -->
    <select id="selectCountByUserId" resultType="long">
    <![CDATA[
        select COUNT(*) from cif_user where (user_id = #{userId})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectDomainByUserId -->
    <select id="selectDomainByUserId" resultType="java.util.HashMap">
    <![CDATA[
        select domain, sub_domain from cif_user where (user_id = #{userId})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectLoginNameByUserId -->
    <select id="selectLoginNameByUserId" resultType="java.lang.String">
    <![CDATA[
        select login_name from cif_user where (user_id = #{userId})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectCountByLoginName -->
    <select id="selectCountByLoginName" resultType="long">
    <![CDATA[
        select COUNT(*) from cif_user where (login_name = #{loginName})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserIdsByUserIds -->
    <select id="selectUserIdsByUserIds" resultType="java.lang.String">
        select user_id from cif_user				where				user_id in				<foreach open=" (" close=")" separator="," collection="userIds" item="item">					#{item}				</foreach>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserIdLoginNameByLoginNames -->
    <select id="selectUserIdLoginNameByLoginNames" resultType="java.util.HashMap">
        select login_name,user_id  from cif_user				where				login_name in				<foreach open=" (" close=")" separator="," collection="loginNames" item="item">					#{item}				</foreach>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserIdNickNameByUserIds -->
    <select id="selectUserIdNickNameByUserIds" resultType="java.util.HashMap">
        select nick_name,user_id  from cif_user				where				user_id in				<foreach open=" (" close=")" separator="," collection="userIds" item="item">					#{item}				</foreach>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserIdLoginNameByUserIds -->
    <select id="selectUserIdLoginNameByUserIds" resultType="java.util.HashMap">
        select login_name,user_id  from cif_user				where				user_id in				<foreach open=" (" close=")" separator="," collection="userIds" item="item">					#{item}				</foreach>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserIdsByCell -->
    <select id="selectUserIdsByCell" resultType="java.lang.String">
    <![CDATA[
        select user_id from cif_user where (cell = #{cell}) limit 0,#recordLimitAmount#
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectRealNameByUserId -->
    <select id="selectRealNameByUserId" resultType="java.lang.String">
    <![CDATA[
        select real_name from cif_user where (user_id = #{userId})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserIdAndRealNameByUserIds -->
    <select id="selectUserIdAndRealNameByUserIds" resultType="java.util.HashMap">
        select user_id,real_name from cif_user where user_id in			<foreach open="(" close=")" separator="," collection="userIds" item="item">						#{item}			</foreach>
    </select>
    <!-- mapped statement for IbatisUserDAO.updateUserDomain -->
    <update id="updateUserDomain">
    <![CDATA[
        update cif_user set domain=#{domain}, sub_domain=#{subDomain}, gmt_modified=sysdate() where (user_id = #{userId})
    ]]>
    </update>

    <!-- mapped statement for IbatisUserDAO.selectUserIdAndIdentityDateByRealNameAndCertNoAndCertType -->
    <select id="selectUserIdAndIdentityDateByRealNameAndCertNoAndCertType" resultMap="USER_ID_AND_IDENTITY_DATE_DO">
        select user_id,gmt_change_identity from cif_user			<where>				<if test="realName != null and realName != ''">					and real_name=#{realName}				</if>				<if test="certNo != null and certNo != ''">					and cert_no=#{certNo}				</if>				<if test="certType != null and certType != ''">					and cert_type=#{certType}				</if>			</where>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserIdAndLoginNameMapByUserIdAndDomain -->
    <select id="selectUserIdAndLoginNameMapByUserIdAndDomain" resultType="java.util.HashMap">
        select u.user_id,u.login_name            from cif_user u            where u.user_id in            (            select            t.user_id            from            cif_third_user_mapping t where            t.third_parent_user_id =            (select            m.third_parent_user_id from            CIF_THIRD_USER_MAPPING m where            m.user_id=#{userId} )            and            t.domain=#{domain}            )            order by u.gmt_create desc
    </select>
    <!-- mapped statement for IbatisUserDAO.selectByMaxGmtModifiedAndRecordCount -->
    <select id="selectByMaxGmtModifiedAndRecordCount" resultMap="RM-USER">
        select				user_id,login_name,login_password,real_name,status,email,qq,can_login,cert_type,cert_no,gmt_create,			gmt_modified,email_validate,qq_validate,cell,cell_validate,account_password,nick_name,user_type_name,domain,sub_domain,			gmt_change_identity,sex,birthday,one_auth_id				from				cif_user				<where>					<if test="gmtModified != null">						gmt_modified  &gt; #{gmtModified}					</if>				</where>				order by gmt_modified asc limit 0,#recordLimitAmount#
    </select>
    <!-- mapped statement for IbatisUserDAO.selectByMaxGmtModified -->
    <select id="selectByMaxGmtModified" resultMap="RM-USER">
    <![CDATA[
        select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (gmt_modified = #{gmtModified})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.updateLoginNameByUserId -->
    <update id="updateLoginNameByUserId">
    <![CDATA[
        update cif_user set login_name=#{loginName}, gmt_modified=sysdate() where (user_id = #{userId})
    ]]>
    </update>

    <!-- mapped statement for IbatisUserDAO.selectByOneAuthId -->
    <select id="selectByOneAuthId" resultMap="RM-USER">
    <![CDATA[
        select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (one_auth_id = #{oneAuthId}) order by gmt_create DESC
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectCountByOneAuthId -->
    <select id="selectCountByOneAuthId" resultType="long">
    <![CDATA[
        select COUNT(*) from cif_user where (one_auth_id = #{oneAuthId})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserIdsByOneAuthId -->
    <select id="selectUserIdsByOneAuthId" resultType="java.lang.String">
    <![CDATA[
        select user_id from cif_user where (one_auth_id = #{oneAuthId})
    ]]>
    </select>
    <!-- mapped statement for IbatisUserDAO.selectHasNotCertNoUserIdByThirdParentUserIdAndThirdChannel -->
    <select id="selectHasNotCertNoUserIdByThirdParentUserIdAndThirdChannel" resultType="java.lang.String">
        select			user_id			from			cif_user t			where exists (				select m.user_id from cif_third_user_mapping m where  m.third_parent_user_id = #{thirdParentUserId}  and m.third_channel = #{thirdChannel}				  and t.user_id = m.user_id			) and t.cert_no is null
    </select>
    <!-- mapped statement for IbatisUserDAO.selectHasNoModifiedCellUserIdsByThirdParentUserIdAndThirdChannelAndCell -->
    <select id="selectHasNoModifiedCellUserIdsByThirdParentUserIdAndThirdChannelAndCell" resultType="java.lang.String">
        select			user_id			from			cif_user t			where exists (				select m.user_id from cif_third_user_mapping m where  m.third_parent_user_id = #{thirdParentUserId}  and m.third_channel = #{thirdChannel}				  and t.user_id = m.user_id			) and  nvl(t.cell, '0') != #{cell}
    </select>
    <!-- mapped statement for IbatisUserDAO.selectUserIdsByCertTypeAndCertNoAndSubdomain -->
    <select id="selectUserIdsByCertTypeAndCertNoAndSubdomain" resultType="java.lang.String">
        select			user_id			from			cif_user			where cert_type=#{certType} and cert_no=#{certNo} and sub_domain=#{subDomain}
    </select>
    <!-- mapped statement for IbatisUserDAO.updateUserStatusByUserId -->
    <update id="updateUserStatusByUserId">
    <![CDATA[
        update cif_user set status=#{status}, gmt_modified=sysdate() where (user_id = #{userId})
    ]]>
    </update>

 

</mapper>