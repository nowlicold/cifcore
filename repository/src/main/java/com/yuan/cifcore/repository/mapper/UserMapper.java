/*
 * Bench Inc.
 * Copyright (c) 2004 All Rights Reserved.
 */
package com.yuan.cifcore.repository.mapper;



// auto generated imports
//dao imports
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.yuan.cifcore.repository.entity.UserDO;
import com.yuan.cifcore.repository.entity.ext.UserIdAndIdentityDateDO;
import org.apache.ibatis.annotations.Param;
import org.springframework.dao.DataAccessException;

import java.util.Date;
import java.util.List;
import java.util.Map;
//do imports

/**
 * A dao interface provides methods to access database table <tt>cif_user</tt>.
 *
 * This file is generated by <tt>bench-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bench</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/cif_user.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bench-gen-dal</tt> 
 * to generate this file.
 *
 * @author cold
 */
public interface UserMapper  extends BaseMapper<UserDO>{
	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id from cif_user where (cert_no = ?) order by gmt_create ASC</tt>
	 *
	 *	@param certNo 
	 *	@param recordLimitAmount 获取的记录数
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 

		public List<String> selectUserIdsByCertNo(@Param("certNo")String certNo , @Param("recordLimitAmount")int recordLimitAmount) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select one_auth_id from cif_user where (user_id = ?)</tt>
	 *
	 *	@param userId 
	 *	@return String
	 *	@throws DataAccessException
	 */	 

		public String selectOneAuthIdByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select cert_no from cif_user where (user_id = ?)</tt>
	 *
	 *	@param userId 
	 *	@return String
	 *	@throws DataAccessException
	 */	 

		public String selectCertNoByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param cell 
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 

		public List<String> selectUserCellsWithSameCertNoAndTypeByCell(@Param("cell")String cell) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select cell from cif_user where ((user_id = ?) AND (cell_validate = 1))</tt>
	 *
	 *	@param userId 
	 *	@return String
	 *	@throws DataAccessException
	 */	 

		public String selectValidatedCellByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select gmt_create from cif_user where (user_id = ?)</tt>
	 *
	 *	@param userId 
	 *	@return Date
	 *	@throws DataAccessException
	 */	 

		public Date selectGmtCreateByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param thirdUserId 
	 *	@param thirdChannel 
	 *	@param domain 
	 *	@return List<UserDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserDO> selectByThirdUserIdAndDomainAndThirdChannel(@Param("thirdUserId")String thirdUserId , @Param("thirdChannel")String thirdChannel , @Param("domain")String domain) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param subDomain 
	 *	@param oneAuthId 
	 *	@return List<UserDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserDO> selectBySubDomainAndOneAuthId(@Param("subDomain")String subDomain , @Param("oneAuthId")String oneAuthId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (user_id = ?)</tt>
	 *
	 *	@param userId 
	 *	@return UserDO
	 *	@throws DataAccessException
	 */	 

		public UserDO selectByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param nickName 
	 *	@return List<UserDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserDO> selectByNickName(@Param("nickName")String nickName) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param nickName 
	 *	@param beginCreateDate 
	 *	@param endCreateDate 
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 

		public List<String> selectUserIdsByNickNameAndGmtCreate(@Param("nickName")String nickName , @Param("beginCreateDate")Date beginCreateDate , @Param("endCreateDate")Date endCreateDate) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select cell_validate from cif_user where (user_id = ?)</tt>
	 *
	 *	@param userId 
	 *	@return boolean
	 *	@throws DataAccessException
	 */	 

		public boolean selectCellValidatedByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where ((nick_name = ?) AND (sub_domain = ?))</tt>
	 *
	 *	@param nickName 
	 *	@param subDomain 
	 *	@return List<UserDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserDO> selectUserByNickNameAndSubDomain(@Param("nickName")String nickName , @Param("subDomain")String subDomain) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where ((cell = ?) AND (cell_validate = '1'))</tt>
	 *
	 *	@param cell 
	 *	@param recordLimitAmount 获取的记录数
	 *	@return List<UserDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserDO> selectByValidatedCell(@Param("cell")String cell , @Param("recordLimitAmount")int recordLimitAmount) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from cif_user where (cell = ?)</tt>
	 *
	 *	@param cell 
	 *	@return long
	 *	@throws DataAccessException
	 */	 

		public long selectCountByCell(@Param("cell")String cell) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from cif_user where ((sub_domain = ?) AND (one_auth_id = ?))</tt>
	 *
	 *	@param subDomain 
	 *	@param oneAuthId 
	 *	@return long
	 *	@throws DataAccessException
	 */	 

		public long selectCountBySubDomainAndOneAuthId(@Param("subDomain")String subDomain , @Param("oneAuthId")String oneAuthId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id from cif_user where ((cell = ?) AND (cell_validate = '1')) order by gmt_create ASC</tt>
	 *
	 *	@param cell 
	 *	@param recordLimitAmount 获取的记录数
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 

		public List<String> selectUserIdsByValidatedCell(@Param("cell")String cell , @Param("recordLimitAmount")int recordLimitAmount) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (0 = 1)</tt>
	 *
	 *	@param userIds 
	 *	@return List<UserDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserDO> selectByUserIds(@Param("userIds")List<?> userIds) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (login_name = ?)</tt>
	 *
	 *	@param loginName 
	 *	@return UserDO
	 *	@throws DataAccessException
	 */	 

		public UserDO selectUserByLoginName(@Param("loginName")String loginName) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select gmt_create, count(user_id) from cif_user where ((gmt_create <= 'endCreateDate') AND (gmt_create >= 'beginCreateDate'))</tt>
	 *
	 *	@param beginCreateDate 
	 *	@param endCreateDate 
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 

		public List<Map<String,Object>> selectEveryDayAddUserCountGroupByDate(@Param("beginCreateDate")Date beginCreateDate , @Param("endCreateDate")Date endCreateDate) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from cif_user where (gmt_create <= ?)</tt>
	 *
	 *	@param gmtCreate 
	 *	@return long
	 *	@throws DataAccessException
	 */	 

		public long selectAllUserCountByEndRegisterDate(@Param("gmtCreate")Date gmtCreate) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param userId 
	 *	@param userTypeName 
	 *	@param loginName 
	 *	@param realName 
	 *	@param email 
	 *	@param qq 
	 *	@param cell 
	 *	@param certNo 
	 *	@param beginCreateDate 
	 *	@param endCreateDate 
	 *	@param orderBy 
	 *	@param userGrade 
	 *	@param thirdParentUserId 
	 *	@param domainList 
	 *	@param subDomainList 
	 *	@param nickNameLike 
	 *	@param oneAuthId 
	 *	@param page 
	 *	@return List<UserDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserDO> search(@Param("userId")String userId , @Param("userTypeName")String userTypeName , @Param("loginName")String loginName , @Param("realName")String realName , @Param("email")String email , @Param("qq")String qq , @Param("cell")String cell , @Param("certNo")String certNo , @Param("beginCreateDate")Date beginCreateDate , @Param("endCreateDate")Date endCreateDate , @Param("orderBy")String orderBy , @Param("userGrade")String userGrade , @Param("thirdParentUserId")String thirdParentUserId , @Param("domainList")List<?> domainList , @Param("subDomainList")List<?> subDomainList , @Param("nickNameLike")String nickNameLike , @Param("oneAuthId")String oneAuthId , @Param("page")Page<UserDO> page) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user set qq=?, email=?, gmt_modified=@db@.sysdate, real_name=?, cert_no=?, cert_type=?, account_password=?, nick_name=?, sex=?, birthday=? where (user_id = ?)</tt>
	 *
	 *	@param user 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateUserInfoByUser(@Param("user")UserDO user) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user set login_password=?, gmt_modified=@db@.sysdate where (user_id = ?)</tt>
	 *
	 *	@param loginPassword 
	 *	@param userId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateLoginPassword(@Param("loginPassword")String loginPassword , @Param("userId")String userId) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user set account_password=?, gmt_modified=@db@.sysdate where (user_id = ?)</tt>
	 *
	 *	@param accountPassword 
	 *	@param userId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateAccountPassword(@Param("accountPassword")String accountPassword , @Param("userId")String userId) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user set status=?, email_validate=?, gmt_modified=@db@.sysdate where (user_id = ?)</tt>
	 *
	 *	@param status 
	 *	@param emailValidate 
	 *	@param userId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateActiveUserByEmail(@Param("status")String status , @Param("emailValidate")boolean emailValidate , @Param("userId")String userId) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user set email_validate=?, gmt_modified=@db@.sysdate where (user_id = ?)</tt>
	 *
	 *	@param emailValidate 
	 *	@param userId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateEmailValidate(@Param("emailValidate")boolean emailValidate , @Param("userId")String userId) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user set email=?, email_validate=?, gmt_modified=@db@.sysdate where (user_id = ?)</tt>
	 *
	 *	@param email 
	 *	@param emailValidate 
	 *	@param userId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateEmail(@Param("email")String email , @Param("emailValidate")boolean emailValidate , @Param("userId")String userId) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user set cell_validate=?, cell=?, gmt_modified=@db@.sysdate where (user_id = ?)</tt>
	 *
	 *	@param cellValidate 
	 *	@param cell 
	 *	@param userId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateCellValidate(@Param("cellValidate")boolean cellValidate , @Param("cell")String cell , @Param("userId")String userId) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user set can_login=?, gmt_modified=@db@.sysdate where (user_id = ?)</tt>
	 *
	 *	@param canLogin 
	 *	@param userId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateUserCanLogin(@Param("canLogin")boolean canLogin , @Param("userId")String userId) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user set gmt_modified=@db@.sysdate where (1 = 0)</tt>
	 *
	 *	@param userIds 
	 *	@param canLogin 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateUsersCanLogin(@Param("userIds")List<?> userIds , @Param("canLogin")boolean canLogin) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user set gmt_modified=@db@.sysdate where (1 = 0)</tt>
	 *
	 *	@param realName 
	 *	@param certNo 
	 *	@param certType 
	 *	@param userId 
	 *	@param gmtChangeIdentity 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateRealNameCertNoAndCertType(@Param("realName")String realName , @Param("certNo")String certNo , @Param("certType")String certType , @Param("userId")String userId , @Param("gmtChangeIdentity")Date gmtChangeIdentity) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from cif_user where (user_id = ?)</tt>
	 *
	 *	@param userId 
	 *	@return long
	 *	@throws DataAccessException
	 */	 

		public long selectCountByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select domain, sub_domain from cif_user where (user_id = ?)</tt>
	 *
	 *	@param userId 
	 *	@return Map<String,Object>
	 *	@throws DataAccessException
	 */	 

		public Map<String,Object> selectDomainByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select login_name from cif_user where (user_id = ?)</tt>
	 *
	 *	@param userId 
	 *	@return String
	 *	@throws DataAccessException
	 */	 

		public String selectLoginNameByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from cif_user where (login_name = ?)</tt>
	 *
	 *	@param loginName 
	 *	@return long
	 *	@throws DataAccessException
	 */	 

		public long selectCountByLoginName(@Param("loginName")String loginName) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param userIds 
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 

		public List<String> selectUserIdsByUserIds(@Param("userIds")List<?> userIds) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select login_name, user_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param loginNames 
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 

		public List<Map<String,Object>> selectUserIdLoginNameByLoginNames(@Param("loginNames")List<?> loginNames) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select nick_name, user_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param userIds 
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 

		public List<Map<String,Object>> selectUserIdNickNameByUserIds(@Param("userIds")List<?> userIds) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select login_name, user_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param userIds 
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 

		public List<Map<String,Object>> selectUserIdLoginNameByUserIds(@Param("userIds")List<?> userIds) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id from cif_user where (cell = ?)</tt>
	 *
	 *	@param cell 
	 *	@param recordLimitAmount 获取的记录数
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 

		public List<String> selectUserIdsByCell(@Param("cell")String cell , @Param("recordLimitAmount")int recordLimitAmount) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select real_name from cif_user where (user_id = ?)</tt>
	 *
	 *	@param userId 
	 *	@return String
	 *	@throws DataAccessException
	 */	 

		public String selectRealNameByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, real_name from cif_user where (1 = 0)</tt>
	 *
	 *	@param userIds 
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 

		public List<Map<String,Object>> selectUserIdAndRealNameByUserIds(@Param("userIds")List<?> userIds) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user set domain=?, sub_domain=?, gmt_modified=@db@.sysdate where (user_id = ?)</tt>
	 *
	 *	@param domain 
	 *	@param subDomain 
	 *	@param userId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateUserDomain(@Param("domain")String domain , @Param("subDomain")String subDomain , @Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, gmt_change_identity from cif_user where (1 = 0)</tt>
	 *
	 *	@param realName 
	 *	@param certNo 
	 *	@param certType 
	 *	@return List<UserIdAndIdentityDateDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserIdAndIdentityDateDO> selectUserIdAndIdentityDateByRealNameAndCertNoAndCertType(@Param("realName")String realName , @Param("certNo")String certNo , @Param("certType")String certType) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, login_name from cif_user where (1 = 0)</tt>
	 *
	 *	@param userId 
	 *	@param domain 
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 

		public List<Map<String,Object>> selectUserIdAndLoginNameMapByUserIdAndDomain(@Param("userId")String userId , @Param("domain")String domain) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param gmtModified 
	 *	@param recordLimitAmount 获取的记录数
	 *	@return List<UserDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserDO> selectByMaxGmtModifiedAndRecordCount(@Param("gmtModified")Date gmtModified , @Param("recordLimitAmount")int recordLimitAmount) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (gmt_modified = ?)</tt>
	 *
	 *	@param gmtModified 
	 *	@return List<UserDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserDO> selectByMaxGmtModified(@Param("gmtModified")Date gmtModified) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user set login_name=?, gmt_modified=@db@.sysdate where (user_id = ?)</tt>
	 *
	 *	@param loginName 
	 *	@param userId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateLoginNameByUserId(@Param("loginName")String loginName , @Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id, login_name, login_password, real_name, status, email, qq, can_login, cert_type, cert_no, gmt_create, gmt_modified, email_validate, qq_validate, cell, cell_validate, account_password, nick_name, user_type_name, domain, sub_domain, gmt_change_identity, sex, birthday, one_auth_id from cif_user where (one_auth_id = ?) order by gmt_create DESC</tt>
	 *
	 *	@param oneAuthId 
	 *	@return List<UserDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserDO> selectByOneAuthId(@Param("oneAuthId")String oneAuthId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from cif_user where (one_auth_id = ?)</tt>
	 *
	 *	@param oneAuthId 
	 *	@return long
	 *	@throws DataAccessException
	 */	 

		public long selectCountByOneAuthId(@Param("oneAuthId")String oneAuthId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id from cif_user where (one_auth_id = ?)</tt>
	 *
	 *	@param oneAuthId 
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 

		public List<String> selectUserIdsByOneAuthId(@Param("oneAuthId")String oneAuthId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param thirdParentUserId 
	 *	@param thirdChannel 
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 

		public List<String> selectHasNotCertNoUserIdByThirdParentUserIdAndThirdChannel(@Param("thirdParentUserId")String thirdParentUserId , @Param("thirdChannel")String thirdChannel) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param thirdParentUserId 
	 *	@param thirdChannel 
	 *	@param cell 
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 

		public List<String> selectHasNoModifiedCellUserIdsByThirdParentUserIdAndThirdChannelAndCell(@Param("thirdParentUserId")String thirdParentUserId , @Param("thirdChannel")String thirdChannel , @Param("cell")String cell) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id from cif_user where (1 = 0)</tt>
	 *
	 *	@param certType 
	 *	@param certNo 
	 *	@param subDomain 
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 

		public List<String> selectUserIdsByCertTypeAndCertNoAndSubdomain(@Param("certType")String certType , @Param("certNo")String certNo , @Param("subDomain")String subDomain) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user set status=?, gmt_modified=@db@.sysdate where (user_id = ?)</tt>
	 *
	 *	@param status 
	 *	@param userId 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateUserStatusByUserId(@Param("status")String status , @Param("userId")String userId) throws DataAccessException;

}