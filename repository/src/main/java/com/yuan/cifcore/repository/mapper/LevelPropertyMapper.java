/*
 * Bench Inc.
 * Copyright (c) 2004 All Rights Reserved.
 */
package com.yuan.cifcore.repository.mapper;



// auto generated imports
//dao imports
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import com.yuan.cifcore.repository.entity.LevelPropertyDO;
import org.springframework.dao.DataAccessException;
import org.apache.ibatis.annotations.Param;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
//do imports
import java.util.Date;

/**
 * A dao interface provides methods to access database table <tt>cif_level_property</tt>.
 *
 * This file is generated by <tt>bench-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bench</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/cif_level_property.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bench-gen-dal</tt> 
 * to generate this file.
 *
 * @author cold
 */
public interface LevelPropertyMapper  extends BaseMapper<LevelPropertyDO>{
	/**
	 *  Query DB table <tt>cif_level_property</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, level_name, level_value, property_name, property_value, gmt_create, gmt_modified, creater, modifier from cif_level_property where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return LevelPropertyDO
	 *	@throws DataAccessException
	 */	 

		public LevelPropertyDO selectById(@Param("id")long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_level_property</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, level_name, level_value, property_name, property_value, gmt_create, gmt_modified, creater, modifier from cif_level_property where ((level_name = ?) AND (level_value = ?))</tt>
	 *
	 *	@param levelName 
	 *	@param levelValue 
	 *	@return List<LevelPropertyDO>
	 *	@throws DataAccessException
	 */	 

		public List<LevelPropertyDO> selectByLevelNameLevelValue(@Param("levelName")String levelName , @Param("levelValue")String levelValue) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_level_property</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_level_property set level_value=?, gmt_modified=@db@.sysdate, modifier=? where ((level_name = ?) AND (level_value = ?))</tt>
	 *
	 *	@param levelValue 
	 *	@param modifier 
	 *	@param levelName 
	 *	@param levelValue2 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updatePropertyValue(@Param("levelValue")String levelValue , @Param("modifier")String modifier , @Param("levelName")String levelName , @Param("levelValue2")String levelValue2) throws DataAccessException;

}