/*
 * Bench Inc.
 * Copyright (c) 2004 All Rights Reserved.
 */
package com.yuan.cifcore.repository.mapper;



// auto generated imports
//dao imports
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.yuan.cifcore.repository.entity.UserRelationDO;
import org.apache.ibatis.annotations.Param;
import org.springframework.dao.DataAccessException;

import java.util.List;
import java.util.Map;

//do imports

/**
 * A dao interface provides methods to access database table <tt>cif_user_relation</tt>.
 *
 * This file is generated by <tt>bench-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bench</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/cif_user_relation.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bench-gen-dal</tt> 
 * to generate this file.
 *
 * @author cold
 */
public interface UserRelationMapper  extends BaseMapper<UserRelationDO>{
	/**
	 * 锁定数据
	 * @param id
	 * @return
	 */
	public UserRelationDO selectByIdForUpdate(@Param("id") long id);
	/**
	 *  Query DB table <tt>cif_user_relation</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, other_user_id, relation_type, from_type, status, gmt_create, creator, gmt_modified, modifier, other_user_name from cif_user_relation where ((user_id = ?) AND (other_user_id = ?) AND (relation_type = ?))</tt>
	 *
	 *	@param userId 
	 *	@param otherUserId 
	 *	@param relationType 
	 *	@return UserRelationDO
	 *	@throws DataAccessException
	 */	 

		public UserRelationDO selectByUserIdOtherUserIdRelationType(@Param("userId")String userId , @Param("otherUserId")String otherUserId , @Param("relationType")String relationType) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_relation</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, other_user_id, relation_type, from_type, status, gmt_create, creator, gmt_modified, modifier, other_user_name from cif_user_relation where ((user_id = ?) AND (other_user_id = ?) AND (relation_type = ?)) for update</tt>
	 *
	 *	@param userId 
	 *	@param otherUserId 
	 *	@param relationType 
	 *	@return UserRelationDO
	 *	@throws DataAccessException
	 */	 

		public UserRelationDO selectByUserIdOtherUserIdRelationTypeForUpdate(@Param("userId")String userId , @Param("otherUserId")String otherUserId , @Param("relationType")String relationType) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user_relation</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user_relation set status=?, gmt_modified=@db@.sysdate, modifier=? where (id = ?)</tt>
	 *
	 *	@param status 
	 *	@param modifier 
	 *	@param id 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateStatusById(@Param("status")String status , @Param("modifier")String modifier , @Param("id")long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_relation</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, other_user_id, other_user_name, relation_type, from_type, status, gmt_create, creator, gmt_modified, modifier from cif_user_relation where (user_id = ?)</tt>
	 *
	 *	@param userId 
	 *	@return List<UserRelationDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserRelationDO> selectByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_relation</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from cif_user_relation</tt>
	 *
	 *	@param status 
	 *	@param relationType 
	 *	@param fromType 
	 *	@param listUserId 
	 *	@param listOtherUserId 
	 *	@return long
	 *	@throws DataAccessException
	 */	 

		public long selectCount(@Param("status")String status , @Param("relationType")String relationType , @Param("fromType")String fromType , @Param("listUserId")List<?> listUserId , @Param("listOtherUserId")List<?> listOtherUserId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_relation</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select count('countField') count_value, 'groupField' count_key from cif_user_relation</tt>
	 *
	 *	@param countField 
	 *	@param groupField 
	 *	@param status 
	 *	@param relationType 
	 *	@param fromType 
	 *	@param listUserId 
	 *	@param listOtherUserId 
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 

		public List<Map<String,Object>> selectCountWithGroupBy(@Param("countField")String countField , @Param("groupField")String groupField , @Param("status")String status , @Param("relationType")String relationType , @Param("fromType")String fromType , @Param("listUserId")List<?> listUserId , @Param("listOtherUserId")List<?> listOtherUserId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_relation</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id from cif_user_relation</tt>
	 *
	 *	@param queryFiled 
	 *	@param status 
	 *	@param relationType 
	 *	@param fromType 
	 *	@param listUserId 
	 *	@param listOtherUserId 
	 *	@param page 
	 *	@return List<Map<String,Object>>
	 *	@throws DataAccessException
	 */	 

		public List<Map<String,Object>> selectPart(@Param("queryFiled")String queryFiled , @Param("status")String status , @Param("relationType")String relationType , @Param("fromType")String fromType , @Param("listUserId")List<?> listUserId , @Param("listOtherUserId")List<?> listOtherUserId , @Param("page")Page<UserRelationDO> page) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_relation</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, other_user_id, relation_type, from_type, status, gmt_create, creator, gmt_modified, modifier, other_user_name from cif_user_relation</tt>
	 *
	 *	@param status 
	 *	@param relationType 
	 *	@param fromType 
	 *	@param listUserId 
	 *	@param listOtherUserId 
	 *	@param page 
	 *	@return List<UserRelationDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserRelationDO> search(@Param("status")String status , @Param("relationType")String relationType , @Param("fromType")String fromType , @Param("listUserId")List<?> listUserId , @Param("listOtherUserId")List<?> listOtherUserId , @Param("page")Page<UserRelationDO> page) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_relation</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, other_user_id, other_user_name, relation_type, from_type, status, gmt_create, creator, gmt_modified, modifier from cif_user_relation where (other_user_id = ?)</tt>
	 *
	 *	@param otherUserId 
	 *	@return List<UserRelationDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserRelationDO> selectByOtherUserId(@Param("otherUserId")String otherUserId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_relation</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, other_user_id, other_user_name, relation_type, from_type, status, gmt_create, creator, gmt_modified, modifier from cif_user_relation where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return UserRelationDO
	 *	@throws DataAccessException
	 */	 

		public UserRelationDO selectById(@Param("id")long id) throws DataAccessException;

}