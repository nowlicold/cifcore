/*
 * Bench Inc.
 * Copyright (c) 2004 All Rights Reserved.
 */
package com.yuan.cifcore.repository.mapper;



// auto generated imports
//dao imports
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import com.yuan.cifcore.repository.entity.UserProfileDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.apache.ibatis.annotations.Param;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
//do imports

/**
 * A dao interface provides methods to access database table <tt>cif_user_profile</tt>.
 *
 * This file is generated by <tt>bench-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bench</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/cif_user_profile.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bench-gen-dal</tt> 
 * to generate this file.
 *
 * @author cold
 */
public interface UserProfileMapper  extends BaseMapper<UserProfileDO>{
	/**
	 *  Query DB table <tt>cif_user_profile</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, profile_name, profile_value, gmt_create, gmt_modified, modifier, creater, enabled from cif_user_profile where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return UserProfileDO
	 *	@throws DataAccessException
	 */	 

		public UserProfileDO selectById(@Param("id")long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_profile</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, profile_name, profile_value, gmt_create, gmt_modified, modifier, creater, enabled from cif_user_profile where (1 = 0)</tt>
	 *
	 *	@param userId 
	 *	@param profileName 
	 *	@param enabled 
	 *	@return UserProfileDO
	 *	@throws DataAccessException
	 */	 

		public UserProfileDO selectEnabledByUserIdAndProfileName(@Param("userId")String userId , @Param("profileName")String profileName , @Param("enabled")Boolean enabled) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_profile</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, profile_name, profile_value, gmt_create, gmt_modified, modifier, creater, enabled from cif_user_profile where (1 = 0)</tt>
	 *
	 *	@param userId 
	 *	@param profileNames 
	 *	@param enabled 
	 *	@return List<UserProfileDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserProfileDO> selectEnabledByUserIdAndProfileNames(@Param("userId")String userId , @Param("profileNames")List<?> profileNames , @Param("enabled")Boolean enabled) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_profile</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, profile_name, profile_value, gmt_create, gmt_modified, modifier, creater, enabled from cif_user_profile where (1 = 0)</tt>
	 *
	 *	@param userIds 
	 *	@param profileName 
	 *	@param enabled 
	 *	@return List<UserProfileDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserProfileDO> selectEnabledByUserIdsAndProfileName(@Param("userIds")List<?> userIds , @Param("profileName")String profileName , @Param("enabled")Boolean enabled) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user_profile</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user_profile set profile_value=?, gmt_modified=@db@.sysdate, modifier=?, enabled=? where ((user_id = ?) AND (profile_name = ?))</tt>
	 *
	 *	@param profileValue 
	 *	@param modifier 
	 *	@param enabled 
	 *	@param userId 
	 *	@param profileName 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateProfileValueByUserIdAndProfileName(@Param("profileValue")String profileValue , @Param("modifier")String modifier , @Param("enabled")boolean enabled , @Param("userId")String userId , @Param("profileName")String profileName) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_user_profile</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_user_profile set gmt_modified=@db@.sysdate, modifier=?, enabled=? where ((user_id = ?) AND (profile_name = ?))</tt>
	 *
	 *	@param modifier 
	 *	@param enabled 
	 *	@param userId 
	 *	@param profileName 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateProfileEnabled(@Param("modifier")String modifier , @Param("enabled")boolean enabled , @Param("userId")String userId , @Param("profileName")String profileName) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_profile</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, profile_name, profile_value, gmt_create, gmt_modified, modifier, creater, enabled from cif_user_profile where (1 = 0)</tt>
	 *
	 *	@param userId 
	 *	@param profileName 
	 *	@param profileValue 
	 *	@param enabled 
	 *	@param minGmtCreate 
	 *	@param maxGmtCreate 
	 *	@param minGmtModified 
	 *	@param maxGmtModified 
	 *	@param page 
	 *	@return List<UserProfileDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserProfileDO> search(@Param("userId")String userId , @Param("profileName")String profileName , @Param("profileValue")String profileValue , @Param("enabled")Boolean enabled , @Param("minGmtCreate")Date minGmtCreate , @Param("maxGmtCreate")Date maxGmtCreate , @Param("minGmtModified")Date minGmtModified , @Param("maxGmtModified")Date maxGmtModified , @Param("page")Page<UserProfileDO> page) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_profile</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, profile_name, profile_value, gmt_create, gmt_modified, modifier, creater, enabled from cif_user_profile where (1 = 0)</tt>
	 *
	 *	@param userId 
	 *	@param profileName 
	 *	@param profileValue 
	 *	@param enabled 
	 *	@param minGmtCreate 
	 *	@param maxGmtCreate 
	 *	@param minGmtModified 
	 *	@param maxGmtModified 
	 *	@param recordLimitAmount 获取的记录数
	 *	@return List<UserProfileDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserProfileDO> searchWithRecordCount(@Param("userId")String userId , @Param("profileName")String profileName , @Param("profileValue")String profileValue , @Param("enabled")Boolean enabled , @Param("minGmtCreate")Date minGmtCreate , @Param("maxGmtCreate")Date maxGmtCreate , @Param("minGmtModified")Date minGmtModified , @Param("maxGmtModified")Date maxGmtModified , @Param("recordLimitAmount")int recordLimitAmount) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_profile</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id from cif_user_profile where (1 = 0)</tt>
	 *
	 *	@param profileName 
	 *	@param enabled 
	 *	@param recordLimitAmount 获取的记录数
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 

		public List<String> selectRandomUserIdsByProfileNameEnabled(@Param("profileName")String profileName , @Param("enabled")Boolean enabled , @Param("recordLimitAmount")int recordLimitAmount) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_user_profile</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select user_id from cif_user_profile where ((profile_name = ?) AND (profile_value = ?) AND (enabled = 1))</tt>
	 *
	 *	@param profileName 
	 *	@param profileValue 
	 *	@return List<String>
	 *	@throws DataAccessException
	 */	 

		public List<String> selectEnabledUserIdByProfileNameAndValue(@Param("profileName")String profileName , @Param("profileValue")String profileValue) throws DataAccessException;

}