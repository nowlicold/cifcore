/*
 * Bench Inc.
 * Copyright (c) 2004 All Rights Reserved.
 */
package com.yuan.cifcore.repository.mapper;



// auto generated imports
//dao imports
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import com.yuan.cifcore.repository.entity.ForbiddenDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.apache.ibatis.annotations.Param;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
//do imports

/**
 * A dao interface provides methods to access database table <tt>cif_forbidden</tt>.
 *
 * This file is generated by <tt>bench-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bench</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/cif_forbidden.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bench-gen-dal</tt> 
 * to generate this file.
 *
 * @author cold
 */
public interface ForbiddenMapper  extends BaseMapper<ForbiddenDO>{
	/**
	 *  Query DB table <tt>cif_forbidden</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, forbidden_object_type, forbidden_object_id, status, forbidden_reason, enabled, gmt_start, gmt_end, gmt_create, gmt_modified, forbidden_minutes, memo, forbidden_action_type_id, operator_type, operator_id, biz_unique_id from cif_forbidden where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return ForbiddenDO
	 *	@throws DataAccessException
	 */	 

		public ForbiddenDO selectById(@Param("id")String id) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_forbidden</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, forbidden_object_type, forbidden_object_id, status, forbidden_reason, enabled, gmt_start, gmt_end, gmt_create, gmt_modified, forbidden_minutes, memo, forbidden_action_type_id, operator_type, operator_id, biz_unique_id from cif_forbidden where (id = ?) for update</tt>
	 *
	 *	@param id 
	 *	@return ForbiddenDO
	 *	@throws DataAccessException
	 */	 

		public ForbiddenDO selectByIdForUpdate(@Param("id")String id) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_forbidden</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, forbidden_object_type, forbidden_object_id, status, forbidden_reason, enabled, gmt_start, gmt_end, gmt_create, gmt_modified, forbidden_minutes, memo, forbidden_action_type_id, operator_type, operator_id, biz_unique_id from cif_forbidden where (1 = 0)</tt>
	 *
	 *	@param forbiddenObjectIds 
	 *	@param forbiddenObjectTypes 
	 *	@return ForbiddenDO
	 *	@throws DataAccessException
	 */	 

		public ForbiddenDO selectMaxGmtEndByForbiddenObjectIdsAndForbiddenObjectTypes(@Param("forbiddenObjectIds")List<?> forbiddenObjectIds , @Param("forbiddenObjectTypes")List<?> forbiddenObjectTypes) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_forbidden</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, forbidden_object_type, forbidden_object_id, status, forbidden_reason, enabled, gmt_start, gmt_end, gmt_create, gmt_modified, forbidden_minutes, memo, forbidden_action_type_id, operator_type, operator_id, biz_unique_id from cif_forbidden where (1 = 0)</tt>
	 *
	 *	@param forbiddenObjectIds 
	 *	@param forbiddenObjectTypes 
	 *	@param forbiddenActionTypeId 
	 *	@return ForbiddenDO
	 *	@throws DataAccessException
	 */	 

		public ForbiddenDO selectMaxGmtEndByForbiddenObjectIdsAndForbiddenObjectTypesAndActionTypeId(@Param("forbiddenObjectIds")List<?> forbiddenObjectIds , @Param("forbiddenObjectTypes")List<?> forbiddenObjectTypes , @Param("forbiddenActionTypeId")long forbiddenActionTypeId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_forbidden</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from cif_forbidden where (1 = 0)</tt>
	 *
	 *	@param forbiddenObjectIds 
	 *	@param forbiddenObjectTypes 
	 *	@param status 
	 *	@return long
	 *	@throws DataAccessException
	 */	 

		public long selectCountByForbiddenObjectIdsAndForbiddenObjectTypes(@Param("forbiddenObjectIds")List<?> forbiddenObjectIds , @Param("forbiddenObjectTypes")List<?> forbiddenObjectTypes , @Param("status")String status) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_forbidden</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, forbidden_object_type, forbidden_object_id, status, forbidden_reason, enabled, gmt_start, gmt_end, gmt_create, gmt_modified, forbidden_minutes, memo, forbidden_action_type_id, operator_type, operator_id, biz_unique_id from cif_forbidden where (biz_unique_id = ?)</tt>
	 *
	 *	@param bizUniqueId 
	 *	@return ForbiddenDO
	 *	@throws DataAccessException
	 */	 

		public ForbiddenDO selectByBizUniqueId(@Param("bizUniqueId")String bizUniqueId) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_forbidden</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, forbidden_object_type, forbidden_object_id, status, forbidden_reason, enabled, gmt_start, gmt_end, gmt_create, gmt_modified, forbidden_minutes, memo, forbidden_action_type_id, operator_type, operator_id, biz_unique_id from cif_forbidden where (1 = 0)</tt>
	 *
	 *	@param status 
	 *	@param count 
	 *	@return List<ForbiddenDO>
	 *	@throws DataAccessException
	 */	 

		public List<ForbiddenDO> selectByStatusGmtEndAndEnabled(@Param("status")String status , @Param("count")int count) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_forbidden</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_forbidden set enabled=?, gmt_modified=@db@.sysdate where (id = ?)</tt>
	 *
	 *	@param enabled 
	 *	@param id 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateEnabledById(@Param("enabled")boolean enabled , @Param("id")String id) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_forbidden</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_forbidden set status=?, biz_unique_id=?, gmt_modified=@db@.sysdate where (id = ?)</tt>
	 *
	 *	@param status 
	 *	@param bizUniqueId 
	 *	@param id 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateStatusAndBizUniqueIdById(@Param("status")String status , @Param("bizUniqueId")String bizUniqueId , @Param("id")String id) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_forbidden</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_forbidden set status=?, biz_unique_id=?, enabled=?, gmt_modified=@db@.sysdate where (id = ?)</tt>
	 *
	 *	@param status 
	 *	@param bizUniqueId 
	 *	@param enabled 
	 *	@param id 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateStatusAndBizUniqueIdAndEnabledById(@Param("status")String status , @Param("bizUniqueId")String bizUniqueId , @Param("enabled")boolean enabled , @Param("id")String id) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_forbidden</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_forbidden set status=?, forbidden_reason=?, gmt_start=?, gmt_end=?, gmt_modified=sysdate, forbidden_minutes=?, memo=?, operator_type=?, forbidden_action_type_id=?, operator_id=?, biz_unique_id=? where (id = ?)</tt>
	 *
	 *	@param forbidden 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateForbiddenInfoById(@Param("forbidden")ForbiddenDO forbidden) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_forbidden</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, forbidden_object_type, forbidden_object_id, status, forbidden_reason, enabled, gmt_start, gmt_end, gmt_create, gmt_modified, forbidden_minutes, memo, forbidden_action_type_id, operator_type, operator_id, biz_unique_id from cif_forbidden where (1 = 0)</tt>
	 *
	 *	@param id 
	 *	@param forbiddenObjectId 
	 *	@param forbiddenObjectType 
	 *	@param userSubDomain 
	 *	@param enabled 
	 *	@param forbiddenActionTypeId 
	 *	@param minGmtEnd 
	 *	@param maxGmtEnd 
	 *	@param page 
	 *	@return List<ForbiddenDO>
	 *	@throws DataAccessException
	 */	 

		public List<ForbiddenDO> search(@Param("id")String id , @Param("forbiddenObjectId")String forbiddenObjectId , @Param("forbiddenObjectType")String forbiddenObjectType , @Param("userSubDomain")String userSubDomain , @Param("enabled")Boolean enabled , @Param("forbiddenActionTypeId")long forbiddenActionTypeId , @Param("minGmtEnd")Date minGmtEnd , @Param("maxGmtEnd")Date maxGmtEnd , @Param("page")Page<ForbiddenDO> page) throws DataAccessException;

}