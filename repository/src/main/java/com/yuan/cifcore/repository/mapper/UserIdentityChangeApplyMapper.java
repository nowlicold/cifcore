/*
 * Bench Inc.
 * Copyright (c) 2004 All Rights Reserved.
 */
package com.yuan.cifcore.repository.mapper;



// auto generated imports
//dao imports
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import com.yuan.cifcore.repository.entity.UserIdentityChangeApplyDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.apache.ibatis.annotations.Param;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
//do imports

/**
 * A dao interface provides methods to access database table <tt>user_identity_change_apply</tt>.
 *
 * This file is generated by <tt>bench-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bench</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/user_identity_change_apply.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bench-gen-dal</tt> 
 * to generate this file.
 *
 * @author cold
 */
public interface UserIdentityChangeApplyMapper  extends BaseMapper<UserIdentityChangeApplyDO>{
	/**
	 *  Query DB table <tt>user_identity_change_apply</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id from user_identity_change_apply where ((status = 'WAIT_AUDIT') AND (user_id = ?))</tt>
	 *
	 *	@param userId 
	 *	@return long
	 *	@throws DataAccessException
	 */	 

		public long selectwaitAuditIdByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_identity_change_apply</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, change_cert_no, change_real_name, creater_id, gmt_create, auditer_id, status, audit_memo, gmt_audit, create_memo, gmt_modified, user_id, change_cert_type, creater_platform_code, auditer_platform_code from user_identity_change_apply where ((status = 'WAIT_AUDIT') AND (user_id = ?))</tt>
	 *
	 *	@param userId 
	 *	@return UserIdentityChangeApplyDO
	 *	@throws DataAccessException
	 */	 

		public UserIdentityChangeApplyDO selectwaitAuditApplyByUserId(@Param("userId")String userId) throws DataAccessException;

	/**
	 *  Update DB table <tt>user_identity_change_apply</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update user_identity_change_apply set auditer_id=?, audit_memo=?, gmt_audit=@db@.sysdate, gmt_modified=@db@.sysdate, auditer_platform_code=?, status=? where (id = ?)</tt>
	 *
	 *	@param auditerId 
	 *	@param auditMemo 
	 *	@param auditerPlatformCode 
	 *	@param status 
	 *	@param id 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateAuditById(@Param("auditerId")String auditerId , @Param("auditMemo")String auditMemo , @Param("auditerPlatformCode")String auditerPlatformCode , @Param("status")String status , @Param("id")long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_identity_change_apply</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, change_cert_no, change_real_name, creater_id, gmt_create, auditer_id, status, audit_memo, gmt_audit, create_memo, gmt_modified, user_id, change_cert_type, creater_platform_code, auditer_platform_code from user_identity_change_apply where (1 = 0)</tt>
	 *
	 *	@param userId 
	 *	@param changeCertNo 
	 *	@param changeRealName 
	 *	@param changeCertType 
	 *	@param status 
	 *	@param createrId 
	 *	@param createrPlatformCode 
	 *	@param auditerId 
	 *	@param auditerPlatformCode 
	 *	@param beginCreateDate 
	 *	@param endCreateDate 
	 *	@param beginAuditDate 
	 *	@param endAuditDate 
	 *	@param page 
	 *	@return List<UserIdentityChangeApplyDO>
	 *	@throws DataAccessException
	 */	 

		public List<UserIdentityChangeApplyDO> search(@Param("userId")String userId , @Param("changeCertNo")String changeCertNo , @Param("changeRealName")String changeRealName , @Param("changeCertType")String changeCertType , @Param("status")String status , @Param("createrId")String createrId , @Param("createrPlatformCode")String createrPlatformCode , @Param("auditerId")String auditerId , @Param("auditerPlatformCode")String auditerPlatformCode , @Param("beginCreateDate")Date beginCreateDate , @Param("endCreateDate")Date endCreateDate , @Param("beginAuditDate")Date beginAuditDate , @Param("endAuditDate")Date endAuditDate , @Param("page")Page<UserIdentityChangeApplyDO> page) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_identity_change_apply</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, change_cert_no, change_real_name, creater_id, gmt_create, auditer_id, status, audit_memo, gmt_audit, create_memo, gmt_modified, user_id, change_cert_type, creater_platform_code, auditer_platform_code from user_identity_change_apply where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return UserIdentityChangeApplyDO
	 *	@throws DataAccessException
	 */	 

		public UserIdentityChangeApplyDO selectById(@Param("id")long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>user_identity_change_apply</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, change_cert_no, change_real_name, creater_id, gmt_create, auditer_id, status, audit_memo, gmt_audit, create_memo, gmt_modified, user_id, change_cert_type, creater_platform_code, auditer_platform_code from user_identity_change_apply where (id = ?) for update</tt>
	 *
	 *	@param id 
	 *	@return UserIdentityChangeApplyDO
	 *	@throws DataAccessException
	 */	 

		public UserIdentityChangeApplyDO selectByIdForUpdate(@Param("id")long id) throws DataAccessException;

}