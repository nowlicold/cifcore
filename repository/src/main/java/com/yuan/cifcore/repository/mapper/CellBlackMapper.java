/*
 * Bench Inc.
 * Copyright (c) 2004 All Rights Reserved.
 */
package com.yuan.cifcore.repository.mapper;



// auto generated imports
//dao imports
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import com.yuan.cifcore.repository.entity.CellBlackDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.apache.ibatis.annotations.Param;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
//do imports

/**
 * A dao interface provides methods to access database table <tt>cif_cell_black</tt>.
 *
 * This file is generated by <tt>bench-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bench</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/cif_cell_black.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bench-gen-dal</tt> 
 * to generate this file.
 *
 * @author cold
 */
public interface CellBlackMapper  extends BaseMapper<CellBlackDO>{
	/**
	 *  Query DB table <tt>cif_cell_black</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, cell, enabled, gmt_create, gmt_modified, from_user_id, current_user_id from cif_cell_black where (cell = ?)</tt>
	 *
	 *	@param cell 
	 *	@return CellBlackDO
	 *	@throws DataAccessException
	 */	 

		public CellBlackDO selectByCell(@Param("cell")String cell) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_cell_black</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, cell, enabled, gmt_create, gmt_modified, from_user_id, current_user_id from cif_cell_black where (id = ?)</tt>
	 *
	 *	@param id 
	 *	@return CellBlackDO
	 *	@throws DataAccessException
	 */	 

		public CellBlackDO selectById(@Param("id")long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_cell_black</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from cif_cell_black where ((cell = ?) AND (enabled = 1))</tt>
	 *
	 *	@param cell 
	 *	@return long
	 *	@throws DataAccessException
	 */	 

		public long selectCountByCellEnabled(@Param("cell")String cell) throws DataAccessException;

	/**
	 *  Update DB table <tt>cif_cell_black</tt>.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>update cif_cell_black set gmt_modified=@db@.sysdate where (1 = 0)</tt>
	 *
	 *	@param enabled 
	 *	@param cells 
	 *	@return int
	 *	@throws DataAccessException
	 */	 

		public int updateEnabledByCells(@Param("enabled")boolean enabled , @Param("cells")List<?> cells) throws DataAccessException;

	/**
	 *  Query DB table <tt>cif_cell_black</tt> for records.
	 *
	 *  <p>
	 *   
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, cell, enabled, gmt_create, gmt_modified, from_user_id, current_user_id from cif_cell_black where (1 = 0)</tt>
	 *
	 *	@param cell 
	 *	@param enabled 
	 *	@param fromUserId 
	 *	@param currentUserId 
	 *	@param gmtCreateStart 
	 *	@param gmtCreateEnd 
	 *	@param page 
	 *	@return List<CellBlackDO>
	 *	@throws DataAccessException
	 */	 

		public List<CellBlackDO> search(@Param("cell")String cell , @Param("enabled")Boolean enabled , @Param("fromUserId")String fromUserId , @Param("currentUserId")String currentUserId , @Param("gmtCreateStart")Date gmtCreateStart , @Param("gmtCreateEnd")Date gmtCreateEnd , @Param("page")Page<CellBlackDO> page) throws DataAccessException;

}